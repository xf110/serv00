name: Daily Login Serv00 Command

on:
  workflow_dispatch:
  schedule:
    - cron: '0 */4 * * *'  # 每4小时执行一次，UTC 时间
env:
  TZ: Asia/Shanghai
jobs:
  run-ssh-command:
    runs-on: ubuntu-latest
   
    steps:
      - name: 检查仓库
        uses: actions/checkout@v2
      - name: 登录ssh
        run: |
          vnt="pgrep -x 'vnts' > /dev/null || /home/${{ secrets.USER1 }}/tool/vnts -p 6911 -g 192.168.26.222 -m 255.255.255.0"
          vpn="pgrep -x 'web' > /dev/null || bash /home/${{ secrets.USER1 }}/tool/sb_serv00.sh 6907 6908 6909"
          vpn1="pgrep -x 'web' > /dev/null || bash /home/${{ secrets.USER3 }}/tool/sb_serv00.sh 6907 6908 6909"
          sshpass -p ${{ secrets.SSH_PRIVATE_KEY }} ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -tt ${{ secrets.USER1 }}@s4.serv00.com "$vnt"
          sshpass -p ${{ secrets.SSH_PRIVATE_KEY }} ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -tt ${{ secrets.USER2 }}@s4.serv00.com "exit"
          sshpass -p ${{ secrets.SSH_PRIVATE_KEY }} ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -tt ${{ secrets.USER3 }}@s8.serv00.com "$vpn1"
          sshpass -p ${{ secrets.SSH_PRIVATE_KEY }} ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -tt ${{ secrets.USER1 }}@s1.ct8.pl "$vpn"
          sshpass -p ${{ secrets.SSH_PRIVATE_KEY }} ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -tt ${{ secrets.USER2 }}@s1.ct8.pl "exit"
      - name: 登录面板
        run: |  
          login_and_check() {
          local username=$1
          local panel_url=$2
          # 获取 CSRF 认证值和 CSRF token 值
          response=$(curl -Lksi "$panel_url/login")
          csrftoken=$(echo "$response" | sed -n 's/.*csrftoken=\([^;]*\);.*/\1/p')
          csrfmiddlewaretoken=$(echo "$response" | sed -n 's/.*<input type="hidden" name="csrfmiddlewaretoken" value="\([^"]*\)".*/\1/p' | head -n 1)
          #echo -e "\033[36;1mcsrfmiddlewaretoken=\033[0m\033[35;1m$csrfmiddlewaretoken \033[0m"
          #echo -e "\033[36;1mcsrftoken=\033[0m\033[35;1m$csrftoken \033[0m"

          # 获取 sessionid 值
          sessionid=$(curl -kis "$panel_url/login/" -X POST \
          -H "Referer: $panel_url/login/" \
          -H "Cookie: csrftoken=$csrftoken" \
          -d "csrfmiddlewaretoken=$csrfmiddlewaretoken&username=$username&password=${{ secrets.SSH_PRIVATE_KEY }}" \
          |  sed -n 's/.*sessionid=\([^;]*\);.*/\1/p')
          #echo -e "\033[36;1msessionid=\033[0m\033[35;1m$sessionid \033[0m"

          # 登录面板并检查状态
          status=$(curl -k -s "$panel_url"  \
          -H 'User-Agent: Github' \
          -H 'Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2' \
          -H "Cookie: csrftoken=${csrftoken}; sessionid=$sessionid" | grep -o "Port reservation")
          if [ ! -z "$status" ]; then
          echo -e "\033[36;1m$(date "+%G-%m-%d %H:%M:%S") ：\033[0m\033[35;1m$username $panel_url 签到保活成功！ \033[0m"
          else
          echo -e "\033[36;1m$(date "+%G-%m-%d %H:%M:%S") ：\033[0m\033[35;1m$username $panel_url 失败了请检查！ \033[0m"
          fi
          }

          # 依次执行登录
          login_and_check "${{ secrets.USER1 }}" "https://panel.ct8.pl"                                                                                                                   
          login_and_check "${{ secrets.USER2 }}" "https://panel.ct8.pl"                                                                                                                   
          login_and_check "${{ secrets.USER1 }}" "https://panel4.serv00.com"                                                                                                              
          login_and_check "${{ secrets.USER2 }}" "https://panel4.serv00.com"                                                                                                              
          login_and_check "${{ secrets.USER3 }}" "https://panel8.serv00.com"                                                                                                               
  keepalive-job:
    name: 保活工作流，防止github60天自动过期
    runs-on: ubuntu-latest
    permissions:
      actions: write
    steps:
      - uses: actions/checkout@v4
      - uses: gautamkrishnar/keepalive-workflow@v2
