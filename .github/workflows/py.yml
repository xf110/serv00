name: Auto Login to Panel

# 触发条件：推送到 main 分支 或手动触发
on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  login:
    runs-on: ubuntu-latest

    steps:
    # 检出当前仓库的代码
    - name: Checkout code
      uses: actions/checkout@v3

    # 设置 Python 环境
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'  # 选择 Python 版本

    # 安装依赖库
    - name: Install dependencies
      run: pip install requests beautifulsoup4

    # 运行 Python 脚本进行登录操作
    - name: Run login script
      env:
        PANEL_USERNAME: ${{ secrets.PANEL_USERNAME }}  # 从 GitHub Secrets 读取用户名
        PANEL_PASSWORD: ${{ secrets.PANEL_PASSWORD }}  # 从 GitHub Secrets 读取密码
      run: |
        python -c "
        import os
        import requests
        from bs4 import BeautifulSoup

        # 目标 URL
        login_url = 'https://panel4.serv00.com/login'

        # 登录信息（从环境变量中获取）
        username = "${{ secrets.USER1 }}"
        password = "${{ secrets.SSH_PRIVATE_KEY }}"

        # 创建一个会话对象
        session = requests.Session()

        # 获取登录页面内容
        response = session.get(login_url)
        soup = BeautifulSoup(response.text, 'html.parser')

        # 尝试获取 csrf_token，如果没有找到，则忽略
        csrf_token_input = soup.find('input', {'name': 'csrf_token'})
        csrf_token = csrf_token_input['value'] if csrf_token_input else None

        # 准备表单数据
        payload = {
        'username': username,
        'password': password,
        }

        # 如果找到 csrf_token，添加到表单数据中
        #if csrf_token:
        payload['csrf_token'] = csrf_token

        # 发送 POST 请求以登录
        login_response = session.post(login_url, data=payload)

        # 检查是否登录成功
        if 'Dashboard' in login_response.text:  # 根据实际的页面内容替换 'Dashboard'
        print('Login successful!')
        else:
        print('Login failed.')
        "
